CMAKE_MINIMUM_REQUIRED(VERSION 3.4.1)
SET(CMAKE_SKIP_BUILD_RPATH true)

PROJECT(tensorflow-lite VERSION ${VERSION} LANGUAGES CXX)

IF(ANDROID_ABI STREQUAL x86_64)
    SET(ANDROID_TARGET_ARCH x86_64)
    SET(ANDROID_TARGET_TYPE android)
ENDIF(ANDROID_ABI STREQUAL x86_64)

IF(ANDROID_ABI STREQUAL x86)
    SET(ANDROID_TARGET_ARCH i686)
    SET(ANDROID_TARGET_TYPE android)
ENDIF(ANDROID_ABI STREQUAL x86)

IF(ANDROID_ABI STREQUAL armeabi-v7a)
    SET(ANDROID_TARGET_ARCH armv7a)
    SET(ANDROID_TARGET_TYPE androideabi)
ENDIF(ANDROID_ABI STREQUAL armeabi-v7a)

IF(ANDROID_ABI STREQUAL arm64-v8a)
    SET(ANDROID_TARGET_ARCH aarch64)
    SET(ANDROID_TARGET_TYPE android)
ENDIF(ANDROID_ABI STREQUAL arm64-v8a)

IF(NOT USE_PREBUILT)
	IF(ANDROID_ABI)
		SET(TARGET_NAME android)
		SET(TOOLCHAIN_PREFIX ${ANDROID_TOOLCHAIN_PREFIX})
		SET(CC ${ANDROID_C_COMPILER})
		SET(CXX ${ANDROID_CXX_COMPILER})
		SET(CXXFLAGS "${CXXFLAGS} -fPIC -DTFLITE_WITHOUT_XNNPACK --target=${ANDROID_TARGET_ARCH}-linux-${ANDROID_TARGET_TYPE}${ANDROID_NATIVE_API_LEVEL} ${ANDROID_COMPILER_FLAGS_CXX} -DTFLITE_ENABLE_DEFAULT_PROFILER")
		SET(CFLAGS "${CFLAGS} --target=${ANDROID_TARGET_ARCH}-linux-${ANDROID_TARGET_TYPE}${ANDROID_NATIVE_API_LEVEL} ${ANDROID_COMPILER_FLAGS} -O3 -fPIC -DTFLITE_ENABLE_DEFAULT_PROFILER")
		SET(LIBS "-lstdc++ -lm -lz -ldl")
		SET(LDFLAGS "${ANDROID_LINKER_FLAGS}")
	ELSE(ANDROID_ABI)
		SET(TARGET_NAME linux)
	ENDIF(ANDROID_ABI)

	IF(ENABLE_NEON STREQUAL "true")
		SET(CFLAGS "${CFLAGS} -D__ARM_NEON__")
	ELSE(ENABLE_NEON STREQUAL "true")
		SET(CFLAGS "${CFLAGS} -DNEON2SSE_DISABLE_PERFORMANCE_WARNING")
	ENDIF(ENABLE_NEON STREQUAL "true")


    ADD_CUSTOM_COMMAND(
        OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/libtensorflow-lite.a;${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/benchmark-lib.a
        COMMAND /usr/bin/make -j 4 -C ${CMAKE_CURRENT_SOURCE_DIR} -f tensorflow/lite/tools/make/Makefile lib benchmark_lib EXTRA_CFLAGS=${CFLAGS} EXTRA_CXXFLAGS=${CXXFLAGS} LIBS=${LIBS} TARGET=${TARGET_NAME} TARGET_ARCH=${ANDROID_TARGET_ARCH} TARGET_TOOLCHAIN_PREFIX=${TOOLCHAIN_PREFIX} CC=${CC} CXX=${CXX} LDFLAGS=${LDFLAGS} BUILD_WITH_NNAPI=true
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Build the tensorflow-lite"
        VERBATIM
    )

    ADD_CUSTOM_TARGET(
        ${PROJECT_NAME}_build ALL
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/libtensorflow-lite.a;${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/benchmark-lib.a
    )

    SET_SOURCE_FILES_PROPERTIES(
        ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/libtensorflow-lite.a;${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/benchmark-lib.a
        PROPERTIES GENERATED TRUE
    )

	ADD_LIBRARY(${PROJECT_NAME} STATIC IMPORTED GLOBAL)
	ADD_DEPENDENCIES(${PROJECT_NAME} ${PROJECT_NAME}_build)
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
		INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}
		IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/libtensorflow-lite.a
	)

	ADD_LIBRARY(${PROJECT_NAME}_benchmark STATIC IMPORTED GLOBAL)
	ADD_DEPENDENCIES(${PROJECT_NAME}_benchmark ${PROJECT_NAME})
	SET_TARGET_PROPERTIES(${PROJECT_NAME}_benchmark PROPERTIES
		INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}
		IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/benchmark-lib.a
	)

	# INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/lib/ DESTINATION ${LIB_INSTALL_DIR} COMPONENT Libraries)
	# INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/make/gen/${TARGET_NAME}_${ANDROID_TARGET_ARCH}/include/ DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Headers)

	# CHECKME: should be built with bazel
	# INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tensorflow/lite/tools/benchmark/benchmark_model/ DESTINATION ${BINDIR} COMPONENT Utilities)

ELSE(NOT USE_PREBUILT)

	ADD_LIBRARY(${PROJECT_NAME} STATIC IMPORTED GLOBAL)
	SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
		INTERFACE_INCLUDE_DIRECTORIES ${PREBUILT_PATH}/include
		IMPORTED_LOCATION ${PREBUILT_PATH}/lib/libtensorflow-lite.a
	)

	ADD_LIBRARY(${PROJECT_NAME}_benchmark STATIC IMPORTED GLOBAL)
	SET_TARGET_PROPERTIES(${PROJECT_NAME}_benchmark PROPERTIES
		INTERFACE_INCLUDE_DIRECTORIES ${PREBUILT_PATH}/include
		IMPORTED_LOCATION ${PREBUILT_PATH}/lib/libbenchmark-lib.a
	)
	ADD_DEPENDENCIES(${PROJECT_NAME}_benchmark ${PROJECT_NAME})

	INSTALL(DIRECTORY ${PREBUILT_PATH}/lib/ DESTINATION ${LIB_INSTALL_DIR} COMPONENT Libraries)
	INSTALL(DIRECTORY ${PREBUILT_PATH}/include/ DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Headers)

ENDIF(NOT USE_PREBUILT)
