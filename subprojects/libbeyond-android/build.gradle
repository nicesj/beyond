plugins {
    id 'de.undercouch.download'
}

apply plugin: 'com.android.library'
apply plugin: 'de.mannodermaus.android-junit5'

def getGitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments '-DCMAKE_VERBOSE_MAKEFILE=1'
                arguments '-DCMAKE_INSTALL_PREFIX:PATH=/usr'
                arguments '-DANDROID_STL=c++_shared'
                arguments '-DBUILD_GTEST=OFF', '-DENABLE_GTEST=OFF'
                arguments '-DUSE_PREBUILT=OFF'
                arguments '-DPREBUILT_PATH=""'
                arguments '-DPKG_CONFIG_USE_CMAKE_PREFIX_PATH=ON'
                arguments '-DNAME=beyond', '-DVERSION=0.0.1'
                arguments "-DREVISION=${getGitHash()}"
                arguments '-DPLATFORM=android'
                arguments '-DUSE_PEER_NN=ON'
                // NOTE:
                // COVERAGE: Only could be turned on for the Debug build (CMAKE_BUILD_TYPE: Debug, gradle will choose this automatically)
                arguments '-DCOVERAGE=ON'
                // NOTE:
                // AAR does not necessary to package the tool in it
                // However, if we trigger the cmake build on the CLI, the tool will be enabled by default
                abiFilters 'arm64-v8a', 'x86_64'
                targets "beyond-android" // BeyonD Java API - JNI implementations
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        prefab false
    }

    externalNativeBuild {
        cmake {
            path "./CMakeLists.txt"
            version "3.18.1"
        }
    }

    packagingOptions {
        // NOTE:
        // Suppress the build warning
        // By the warning, the following option is going to be turned on automatically.
        //
        // The warning message was
        // 'PackagingOptions.jniLibs.useLegacyPackaging should be set to true because android:extractNativeLibs is set to "true" in AndroidManifest.xml.'
        jniLibs.useLegacyPackaging true
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation project(':libbeyond')

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testImplementation 'org.mockito:mockito-core:2.24.5'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.7.1"

    androidTestImplementation 'androidx.appcompat:appcompat:1.3.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0'
    androidTestImplementation 'org.mockito:mockito-android:2.23.4'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

preBuild.dependsOn ":libbeyond:build"
