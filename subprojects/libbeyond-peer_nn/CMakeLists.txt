CMAKE_MINIMUM_REQUIRED(VERSION 3.4.1)
SET(CMAKE_SKIP_BUILD_RPATH true)
PROJECT(${NAME}-peer_nn CXX)

IF(CMAKE_SOURCE_DIR STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
    IF(NOT DEFINED PROJECT_ROOT_DIR)
        SET(PROJECT_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../..)
    ENDIF(NOT DEFINED PROJECT_ROOT_DIR)

    INCLUDE(${PROJECT_ROOT_DIR}/cmake/beyond_prepare.cmake)

    # NOTE
    # We are able to package the following libraries as AAR packages
    IF((BEYOND_LIBRARIES STREQUAL ${NAME}) AND (NOT PROJECT_NAME STREQUAL ${NAME}))
        ADD_SUBDIRECTORY(${PROJECT_ROOT_DIR}/subprojects/libbeyond ${CMAKE_BINARY_DIR}/subprojects/libbeyond)
    ENDIF((BEYOND_LIBRARIES STREQUAL ${NAME}) AND (NOT PROJECT_NAME STREQUAL ${NAME}))
ENDIF(CMAKE_SOURCE_DIR STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")

ADD_DEFINITIONS(-DLOG_TAG="BEYOND_PEER_NN")

# CMake find modules
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

IF(PLATFORM STREQUAL "android")
    INCLUDE(${PROJECT_ROOT_DIR}/cmake/beyond_android_grpc.cmake)
    INCLUDE(${PROJECT_ROOT_DIR}/cmake/beyond_android_gstreamer.cmake)

    LINK_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/libs)
    IF(ANDROID_ABI STREQUAL "arm64-v8a")
        SET(GST_ANDROID gst_android)
    ENDIF()
ELSE(PLATFORM STREQUAL "android")
    PKG_CHECK_MODULES(PEER_PKGS REQUIRED
        glib-2.0
        gio-2.0
        gstreamer-1.0
        gstreamer-app-1.0
    )

    FOREACH(CFLAG ${PEER_PKGS_CFLAGS})
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CFLAG}")
    ENDFOREACH(CFLAG)
    SET(GST_LIBRARIES ${PEER_PKGS_LDFLAGS})
    SET(GRPC_LIBRARIES gRPC::grpc++_reflection_custom protobuf::libprotobuf_custom)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(PLATFORM STREQUAL "android")

INCLUDE_DIRECTORIES(include)
AUX_SOURCE_DIRECTORY(src PEER_NN_SRC)

FIND_PACKAGE(Protobuf REQUIRED)
FIND_PACKAGE(gRPC REQUIRED)

# Proto file
GET_FILENAME_COMPONENT(PROTO "protos/peer_nn.proto" ABSOLUTE)
GET_FILENAME_COMPONENT(PROTO_PATH ${PROTO} PATH)

SET(PROTO_SRC_DIR ${CMAKE_CURRENT_BINARY_DIR}/proto-src)
FILE(MAKE_DIRECTORY ${PROTO_SRC_DIR})
INCLUDE_DIRECTORIES(${PROTO_SRC_DIR})

PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${PROTO_SRC_DIR} ${PROTO})
GRPC_GENERATE_CPP(GRPC_SRCS GRPC_HDRS ${PROTO_SRC_DIR} ${PROTO})
SET_SOURCE_FILES_PROPERTIES(${PROTO_SRCS} PROPERTIES COMPILE_FLAGS -Wno-array-bounds)
SET_SOURCE_FILES_PROPERTIES(${GRPC_SRCS} PROPERTIES COMPILE_FLAGS -Wno-array-bounds)

IF(CMAKE_BUILD_TYPE MATCHES Debug)
    SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,-emain")
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)
ADD_LIBRARY(${PROJECT_NAME} SHARED ${PEER_NN_SRC} ${PROTO_SRCS} ${GRPC_SRCS} ${PROTO_HDRS} ${GRPC_HDRS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LOG_LIBRARIES} ${BEYOND_LIBRARIES} ${GST_ANDROID} ${GST_LIBRARIES} ${GRPC_LIBRARIES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
    PUBLIC_HEADER include/${NAME}/plugin/peer_nn_plugin.h
)
INSTALL(TARGETS ${PROJECT_NAME}
    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
    PUBLIC_HEADER DESTINATION ${INCLUDE_INSTALL_DIR}/${NAME}/plugin
)

SET(PC_NAME ${PROJECT_NAME})
CONFIGURE_FILE(${PROJECT_NAME}.pc.in ${PROJECT_NAME}.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${PKGCONFIG_DIR})
SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_CMAKE_CLEAN_FILES "${PROJECT_NAME}.pc")

ADD_DEPENDENCIES(${PROJECT_NAME} ${DEPENDS_ON_BEYOND})

IF(ENABLE_GTEST)
    ADD_SUBDIRECTORY(test)
ENDIF(ENABLE_GTEST)
