CMAKE_MINIMUM_REQUIRED(VERSION 3.4.1)
SET(CMAKE_SKIP_BUILD_RPATH true)
PROJECT(${NAME}-runtime_tflite CXX)

IF(CMAKE_SOURCE_DIR STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
    IF(NOT DEFINED PROJECT_ROOT_DIR)
        SET(PROJECT_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../..)
    ENDIF(NOT DEFINED PROJECT_ROOT_DIR)

    INCLUDE(${PROJECT_ROOT_DIR}/cmake/beyond_prepare.cmake)

    # NOTE
    # We are able to package the following libraries as AAR packages
    IF((BEYOND_LIBRARIES STREQUAL ${NAME}) AND (NOT PROJECT_NAME STREQUAL ${NAME}))
        ADD_SUBDIRECTORY(${PROJECT_ROOT_DIR}/subprojects/libbeyond ${CMAKE_BINARY_DIR}/subprojects/libbeyond)
    ENDIF((BEYOND_LIBRARIES STREQUAL ${NAME}) AND (NOT PROJECT_NAME STREQUAL ${NAME}))
ENDIF(CMAKE_SOURCE_DIR STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")

ADD_DEFINITIONS(-DLOG_TAG="BEYOND_RUNTIME_TFLITE")

# FIXME:
# tensorflow-lite produces too many warnings.
# in order to build this, it is necessary to disable -Werror option
STRING(REPLACE "-Werror" " " CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
STRING(REPLACE "=format-security" " " CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
STRING(REPLACE "-Wl,-undefined,error" " " CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")

IF(PLATFORM STREQUAL "android")
#    SET(TFLITE_ENABLE_RUY OFF CACHE BOOL "Enable experimental RUY integration" FORCE)
#    SET(TFLITE_ENABLE_RESOURCE OFF CACHE BOOL "Enable experimental support for resources" FORCE)
#    SET(TFLITE_ENABLE_NNAPI ON CACHE BOOL "Enable NNAPI (Android only)." FORCE)
#    SET(TFLITE_ENABLE_MMAP ON CACHE BOOL "Enable MMAP (unsupported on Windows)" FORCE)
#    SET(TFLITE_ENABLE_GPU ON CACHE BOOL "Enable GPU" FORCE)
#    SET(TFLITE_ENABLE_METAL OFF CACHE BOOL "Enable Metal delegate (iOS only)" FORCE)
    SET(TFLITE_ENABLE_XNNPACK OFF CACHE BOOL "Enable XNNPACK backend" FORCE)
#    SET(TFLITE_ENABLE_EXTERNAL_DELEGATE OFF CACHE BOOL "Enable External Delegate backend" FORCE)
#    SET(TFLITE_KERNEL_TEST OFF CACHE BOOL "Enable tflite kernel unit test" FORCE)
    ADD_SUBDIRECTORY(${PROJECT_ROOT_DIR}/third_party/tensorflow/tensorflow/lite ${CMAKE_BINARY_DIR}/third_party/tensorflow)

    SET(DEPENDS_ON tensorflow-lite)
    SET(LIBRARIES tensorflow-lite)
ELSE(PLATFORM STREQUAL "android")
    PKG_CHECK_MODULES(RUNTIME_PKGS tensorflow-lite)
    IF(RUNTIME_PKGS_FOUND)
        FOREACH(CFLAG ${RUNTIME_PKGS_CFLAGS})
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CFLAG}")
        ENDFOREACH(CFLAG)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        SET(LIBRARIES ${RUNTIME_PKGS_LDFLAGS})
    ELSE(RUNTIME_PKGS_FOUND)
        SET(TFLITE_ENABLE_RUY OFF CACHE BOOL "Enable experimental RUY integration" FORCE)

        # FIXME:
        # The latest TFLite gets failed during linking because of undefined tflite::resource::ResourceVariable::AssignFrom(TfLiteTensor const*) symbol error
        # In order to avoid such an error, turn on the following experimental flag
        SET(TFLITE_ENABLE_RESOURCE ON CACHE BOOL "Enable experimental support for resources" FORCE)

        SET(TFLITE_ENABLE_NNAPI OFF CACHE BOOL "Enable NNAPI (Android only)." FORCE)
        SET(TFLITE_ENABLE_MMAP ON CACHE BOOL "Enable MMAP (unsupported on Windows)" FORCE)
        SET(TFLITE_ENABLE_GPU OFF CACHE BOOL "Enable GPU" FORCE)
        SET(TFLITE_ENABLE_METAL OFF CACHE BOOL "Enable Metal delegate (iOS only)" FORCE)
        SET(TFLITE_ENABLE_XNNPACK ON CACHE BOOL "Enable XNNPACK backend" FORCE)
        SET(TFLITE_ENABLE_EXTERNAL_DELEGATE ON CACHE BOOL "Enable External Delegate backend" FORCE)
        SET(TFLITE_KERNEL_TEST OFF CACHE BOOL "Enable tflite kernel unit test" FORCE)
        ADD_SUBDIRECTORY(${PROJECT_ROOT_DIR}/third_party/tensorflow/tensorflow/lite ${CMAKE_BINARY_DIR}/third_party/tensorflow)

        SET(DEPENDS_ON tensorflow-lite)
        SET(LIBRARIES tensorflow-lite)
    ENDIF(RUNTIME_PKGS_FOUND)
ENDIF(PLATFORM STREQUAL "android")

INCLUDE_DIRECTORIES(include)
AUX_SOURCE_DIRECTORY(src RUNTIME_TFLITE_SRC)

IF(CMAKE_BUILD_TYPE MATCHES Debug)
    SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,-emain")
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${RUNTIME_TFLITE_SRC})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LOG_LIBRARIES} ${BEYOND_LIBRARIES} ${LIBRARIES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
    PUBLIC_HEADER include/${NAME}/plugin/runtime_tflite_plugin.h
)
INSTALL(TARGETS ${PROJECT_NAME}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${NAME}/plugin
)

SET(PC_NAME ${PROJECT_NAME})
CONFIGURE_FILE(${PROJECT_NAME}.pc.in ${PROJECT_NAME}.pc @ONLY)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${CMAKE_INSTALL_PCDIR})
SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_CMAKE_CLEAN_FILES "${PROJECT_NAME}.pc")

ADD_DEPENDENCIES(${PROJECT_NAME} ${DEPENDS_ON_BEYOND} ${DEPENDS_ON})
