apply plugin: 'com.android.library'
apply plugin: 'de.mannodermaus.android-junit5'

def getGitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    ndkVersion "21.3.6528147"

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                arguments '-DCMAKE_VERBOSE_MAKEFILE=1'
                arguments '-DCMAKE_INSTALL_PREFIX:PATH=/usr'
                arguments '-DANDROID_STL=c++_shared'
                arguments '-DENABLE_GTEST=OFF'
                arguments '-DPLATFORM_PACKAGE=OFF'
                arguments '-DSYSCONF_INSTALL_DIR=/etc', '-DLIB_INSTALL_DIR=/usr/lib', '-DINCLUDE_INSTALL_DIR=/usr/include', '-DPKGCONFIG_DIR=/usr/lib/pkgconfig', '-DPREFIX=/usr'
                arguments '-DNAME=beyond', '-DVERSION=0.0.1'
                arguments "-DREVISION=${getGitHash()}"
                arguments '-DPLATFORM=android'
                // NOTE:
                // COVERAGE: Only could be turned on for the Debug build (CMAKE_BUILD_TYPE: Debug, gradle will choose this automatically)
                abiFilters 'arm64-v8a', 'x86'
                targets "beyond" // Disable beyond-mock for AAR creating: "beyond-mock"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        // NOTE:
        // Surpress the build warning
        // By the warning, the following option is going to be turned on automatically.
        //
        // The warning message was
        // 'PackagingOptions.jniLibs.useLegacyPackaging should be set to true because android:extractNativeLibs is set to "true" in AndroidManifest.xml.'
        jniLibs.useLegacyPackaging true

        // NOTE:
        // This AAR does not aim to provide the following native libraries
        // The following native libraries would be included by an AAR which is going to have depdendency of this
        exclude 'lib/*/libc++_shared.so'
        exclude 'lib/*/libbeyond.so'
    }

    buildFeatures {
        prefabPublishing true
    }

    prefab {
        beyond {
            headers "include/prefab"
        }
    }

    externalNativeBuild {
        cmake {
            path "./CMakeLists.txt"
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.7.1"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
